name: Sync with JSON Processing

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 0

      - name: 配置上游仓库
        run: |
          git remote add upstream ${{ secrets.UPSTREAM_REPO }}
          git fetch upstream ${{ secrets.UPSTREAM_BRANCH }}
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: 检查更新
        id: check-updates
        run: |
          LOCAL_BASE=$(git show HEAD:.upstream_commit 2>/dev/null || echo "empty")
          UPSTREAM_CURRENT=$(git rev-parse upstream/main)
          
          echo "本地基准: ${LOCAL_BASE}"
          echo "上游最新: ${UPSTREAM_CURRENT}"
          
          if [ "$LOCAL_BASE" != "$UPSTREAM_CURRENT" ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "UPSTREAM_HASH=${UPSTREAM_CURRENT}" >> $GITHUB_ENV
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi

      - name: 同步上游
        if: steps.check-updates.outputs.has_updates == 'true'
        run: |
          git reset --hard upstream/${{ secrets.UPSTREAM_BRANCH }}
          git clean -fd
          
          # 关键修改：从你的仓库恢复 Actions 配置
          git checkout origin/${{ github.ref_name }} -- .github/workflows/
          
          # 更新基准标记
          echo "${{ env.UPSTREAM_HASH }}" > .upstream_commit
      
      - name: 处理 JSON 文件
        if: steps.check-updates.outputs.has_updates == 'true'
        run: |
          # 安装 Python 依赖（如果系统未预装）
          sudo apt-get install -y python3
          
          # 创建处理脚本
          cat << 'EOF' > process_json.py
          import json
          import sys
          
          def merge_fields(data):
              # 根据实际 JSON 结构调整定位逻辑
              if isinstance(data, dict):
                  # 如果是对象结构
                  if "loginCheckJs" in data and "jsLib" in data:
                      data["jsLib"] = data["loginCheckJs"] + '\n' + data["jsLib"]
                      # del data["loginCheckJs"]
                  # 递归处理子结构
                  for v in data.values():
                      if isinstance(v, (dict, list)):
                          merge_fields(v)
              elif isinstance(data, list):
                  # 如果是数组结构
                  for item in data:
                      merge_fields(item)
          
          if __name__ == "__main__":
              with open(sys.argv[1], 'r', encoding='utf-8') as f:
                  content = json.load(f)
              
              merge_fields(content)  # 执行合并操作
              
              with open(sys.argv[1], 'w', encoding='utf-8') as f:
                  json.dump(content, f, indent=4, ensure_ascii=False)
          EOF
      
          # 执行脚本（替换为你的实际 JSON 文件路径）
          python3 process_json.py linpx.json
          python3 process_json.py pixiv.json
      
          # 提交修改
          git add *.json .upstream_commit
          git rm .github/workflows/Refresh.yml
          git commit -m "自动合并"

      - name: 强制推送
        if: steps.check-updates.outputs.has_updates == 'true'
        run: git push origin ${{ github.ref_name }} --force
