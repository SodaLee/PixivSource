[
    {
        "bookSourceComment": "Linpx 书源（更新时间：2024-12-31）\n\n可用功能：✅搜索✅发现✅添加网址✅订阅源\n搜索小说：✅小说名称✅作者名称✅小说标签\n发现小说：✅推荐作者✅最近更新\n添加网址：✅Linpx小说链接(✅分享链接✅原链接)\n订阅用法：点击订阅源打开小说，点击【添加到书架】按钮添加小说到书架\n温馨提示：⚠️ Linpx 的系列小说 api 目前不会返回小说id，添加系列小说后，无法再次获取目录\n\n书源发布：兽人阅读频道 https://t.me/FurryReading\n项目地址：https://github.com/windyhusky/PixivSource\n\n规则订阅：Import 订阅源\nhttps://cdn.jsdelivr.net/gh/windyhusky/PixivSource@main/import.json\nhttps://raw.githubusercontent.com/windyhusky/PixivSource/main/import.json\n\n可选设置：\n编辑书源 - 设置源变量 - 复制代码模板 - 修改并保存\n若源变量为空，则使用默认设置（书源 - 基本 - 变量说明）",
        "bookSourceGroup": "🔞 Pixiv",
        "bookSourceName": "Linpx",
        "bookSourceType": 0,
        "bookSourceUrl": "https://furrynovel.ink",
        "bookUrlPattern": "(https?://)?(api\\.|www\\.)?(furrynovel\\.(ink|xyz))/(pn|pixiv/novel)/\\d+(/cache)?",
        "customOrder": 2,
        "enabled": true,
        "enabledCookieJar": false,
        "enabledExplore": true,
        "exploreUrl": "[\n  {\n    \"title\": \"推荐作者\",\n    \"url\": \"https://api.furrynovel.ink/fav/user/cache\",\n    \"style\": {\n      \"layout_flexGrow\": 1,\n      \"layout_flexBasisPercent\":0.3\n    }\n  },\n  {\n    \"title\": \"最新小说\",\n    \"url\": \"https://api.furrynovel.ink/pixiv/novels/recent/cache?page={{page}}\",\n    \"style\": {\n      \"layout_flexGrow\": 1,\n      \"layout_flexBasisPercent\":0.3\n    }\n  }\n]",
        "header": "{\"referer\":\"https://furrynovel.ink/\"}",
        "lastUpdateTime": 1734485499251,
        "loginCheckJs": "var util = {}\n\nfunction objStringify(obj) {\n    return JSON.stringify(obj, (n, v) => {\n        if (typeof v == \"function\")\n            return v.toString();\n        return v;\n    });\n}\n\nfunction publicFunc() {\n    let u = {}\n    let input =  String(source.getVariable())  // [object JavaObject]\n    var settings = {}\n    try {\n        if (input != \"debug\" && input != \"\" && input != null) {\n            settings = JSON.parse(input.split(\"//\")[0])\n            java.log(\"使用自定义设置\")\n        } else {\n            settings = JSON.parse(String(source.variableComment).split(\"//\")[0])\n            java.log(\"自定义设置为空，使用默认设置\")\n        }\n    } catch (e) {\n        settings = JSON.parse(String(source.variableComment).split(\"//\")[0])\n        java.log(\"自定义设置有误，使用默认设置\")\n    } finally {\n        u.SHOW_ORIGINAL_NOVEL_LINK = settings.SHOW_ORIGINAL_NOVEL_LINK  // 目录处显示小说源链接，但会增加请求次数\n        u.REPLACE_BOOK_TITLE_MARKS = settings.REPLACE_BOOK_TITLE_MARKS  // 注音内容为汉字时，替换为书名号\n        u.MORE_INFO_IN_DESCRIPTION = settings.MORE_INFO_IN_DESCRIPTION  // 书籍简介显示更多信息\n        u.DEBUG = settings.DEBUG // 调试模式\n    }\n\n    if (input === \"debug\") {\n        u.DEBUG = true // 调试模式\n    }\n    if (u.DEBUG === true) {\n        // java.log(JSON.stringify(settings))\n        // java.log(`SHOW_ORIGINAL_NOVEL_LINK = ${u.SHOW_ORIGINAL_NOVEL_LINK}`)\n        // java.log(`REPLACE_BOOK_TITLE_MARKS = ${u.REPLACE_BOOK_TITLE_MARKS}`)\n        // java.log(`MORE_INFO_IN_DESCRIPTION = ${u.MORE_INFO_IN_DESCRIPTION}`)\n        java.log(`DEBUG = ${u.DEBUG}`)\n    }\n\n\n    u.debugFunc = (func) => {\n        if (util.DEBUG) {\n            func()\n        }\n    }\n    u.cacheGetAndSet = (key, supplyFunc) => {\n        let v = cache.get(key)\n        if (v === undefined || v === null) {\n            v = JSON.stringify(supplyFunc())\n            // 缓存10分钟\n            cache.put(key, v, 600)\n        }\n        return JSON.parse(v)\n    }\n    u.getAjaxJson = (url) => {\n        return util.cacheGetAndSet(url, () => {\n            return JSON.parse(java.ajax(url))\n        })\n    }\n    u.getWebviewJson = (url) => {\n        return util.cacheGetAndSet(url, () => {\n            let html = java.webView(null, url, null)\n            return JSON.parse((html.match(new RegExp(\">\\\\[{.*?}]<\"))[0].replace(\">\", \"\").replace(\"<\", \"\")))\n        })\n    }\n\n    u.urlNovelUrl = (id) => {\n        return `https://furrynovel.ink/pixiv/novel/${id}/cache`\n    }\n    u.urlNovelDetailed = (id) => {\n        return `https://api.furrynovel.ink/pixiv/novel/${id}/cache`\n    }\n    u.urlNovelsDetailed = (nidList) => {\n        return `https://api.furrynovel.ink/pixiv/novels/cache?${nidList.map(v => \"ids[]=\" + v).join(\"&\")}`\n    }\n    u.urlNovel = (novelId) => {\n        if (util.SHOW_ORIGINAL_NOVEL_LINK) {\n            return util.urlNovelUrl(novelId)\n        } else {\n            return util.urlNovelDetailed(novelId)\n        }\n    }\n\n    // u.urlSeriesUrl = function (id) {\n    //     return `https://furrynovel.ink/pixiv/series/${id}/cache`\n    // }\n    u.urlSeriesUrl = (seriesId) => {\n        return `https://www.pixiv.net/novel/series/${seriesId}`\n    }\n    u.urlSeriesDetailed = (id) => {\n        return `https://api.furrynovel.ink/pixiv/series/${id}/cache`\n    }\n\n    u.urlUserUrl = (id) => {\n        return `https://furrynovel.ink/pixiv/user/${id}/cache`\n    }\n    u.urlUserDetailed = (id) => {\n        return `https://api.furrynovel.ink/pixiv/user/${id}/cache`\n    }\n    u.urlUsersDetailed = (nidList) => {\n        return `https://api.furrynovel.ink/pixiv/users/cache?${nidList.map(v => \"ids[]=\" + v).join(\"&\")}`\n    }\n\n    u.urlSearchNovel = (novelname) => {\n        return `https://api.furrynovel.ink/pixiv/search/novel/${novelname}/cache`\n    }\n    u.urlSearchUsers = (username) => {\n        return `https://api.furrynovel.ink/pixiv/search/user/${username}/cache`\n    }\n\n    u.urlCoverUrl = (pxImgUrl) => {\n        return `https://pximg.furrynovel.ink/?url=${pxImgUrl}&w=800`\n    }\n    // u.urlIllustUrl = function (illustId) {\n    //     return `https://www.pixiv.net/artworks/${illustId}`\n    // }\n    u.urlIllustOriginal = (illustId, order) => {\n        // 使用 pixiv.cat 获取插图\n        let illustOriginal = `https://pixiv.re/${illustId}.png`\n        // let illustOriginal = `https://pixiv.nl/${illustId}.png`\n        if (order >= 1) {\n            illustOriginal = `https://pixiv.re/${illustId}-${order}.png`\n            // illustOriginal = `https://pixiv.nl/${illustId}-${order}.png`\n        }\n        return illustOriginal\n    }\n\n    u.formatNovels = function (novels) {\n        novels.forEach(novel => {\n            // novel.createDate = novel.createDate\n            novel.textCount = novel.length\n            novel.description = novel.desc\n            novel.detailedUrl = util.urlNovelDetailed(novel.id)\n            if (novel.seriesId !== undefined && novel.seriesId !== null) {\n                novel.title = novel.seriesTitle\n                novel.length = null\n\n                java.log(`正在获取系列小说：${novel.seriesId}`)\n                let series = util.getAjaxJson(util.urlSeriesDetailed(novel.seriesId))\n                // 后端目前没有系列的coverUrl字段\n                // novel.coverUrl = util.urlCoverUrl(series.coverUrl)\n                novel.coverUrl = util.urlCoverUrl(series.novels[0].coverUrl)\n\n                if (series.caption === \"\") {\n                    let firstNovels = util.getAjaxJson(util.urlNovelsDetailed([series.novels[0].id]))\n                    if (firstNovels.length > 0) {\n                        novel.description = firstNovels[0].desc\n                    } else {\n                        novel.description = \"该小说可能部分章节因为权限或者被删除无法查看\"\n                    }\n                } else {\n                    novel.description = series.caption\n                }\n\n                //如果没有标签 取第一章的tag\n                if (series.tags.length === 0) {\n                    // 系列至少会有一章\n                    novel.tags = series.novels[0].tags\n                } else {\n                    novel.tags = series.tags\n                }\n\n                if (novel.tags === undefined) {\n                    novel.tags = []\n                }\n                novel.tags.unshift(\"长篇\")\n\n\n            } else {\n                if (novel.tags === undefined) {\n                    novel.tags = []\n                }\n                novel.tags.unshift(\"单本\")\n                novel.coverUrl = util.urlCoverUrl(novel.coverUrl)\n            }\n\n            novel.tags = novel.tags.join(\",\")\n            novel.createDate = util.dateFormat(novel.createDate)\n            // novel.description = `${novel.description}\\n更新时间：${novel.time}`\n            if (util.MORE_INFO_IN_DESCRIPTION) {\n                novel.description = `\\n书名：${novel.title}\\n作者：${novel.userName}\\n标签：${novel.tags}\\n上传：${novel.createDate}\\n简介：${novel.description}`\n            } else {\n                novel.description = `\\n${novel.description}\\n上传时间：${novel.createDate}`\n            }\n        })\n        return novels\n    }\n    // 将多个长篇小说解析为一本书\n    u.combineNovels = function(novels) {\n        return novels.filter(novel => {\n            // 单本直接解析为一本书，需要判断是否为 null\n            if (novel.seriesId === undefined || novel.seriesId === null) {\n                return true\n            }\n            //集合中没有该系列解析为一本书\n            if (!seriesSet.has(novel.seriesId)) {\n                seriesSet.add(novel.seriesId)\n                return true\n            }\n            return false\n        })\n    }\n    // 从网址获取id，返回单篇小说 res，系列返回首篇小说 res\n    u.getNovelRes = function (result) {\n        let novelId = 0, res = {}\n        let isHtml = result.startsWith(\"<!DOCTYPE html>\")\n        if (isHtml) {\n            let id = baseUrl.match(new RegExp(\"\\\\d+\"))[0]\n            let pattern = \"(https?://)?(www\\\\.)?pixiv\\\\.net(/ajax)?/novel/(series/)?\\\\d+\"\n            let isSeries = baseUrl.match(new RegExp(pattern))\n            if (isSeries) {\n                java.log(`系列ID：${id}`)\n                res = util.getAjaxJson(util.urlSeriesDetailed(id))\n            } else {\n                let pattern = \"((furrynovel\\\\.(ink|xyz))|pixiv\\\\.net)/(pn|(pixiv/)?novel)/(show\\\\.php\\\\?id=)?\\\\d+\"\n                let isNovel = baseUrl.match(new RegExp(pattern))\n                if (isNovel) {\n                    novelId = id\n                }\n            }\n        } else {\n            res = JSON.parse(result)\n        }\n        if (res.total !== undefined && res.total !== null) {\n            novelId = res.novels[0].id\n        }\n        if (novelId) {\n            java.log(`匹配小说ID：${novelId}`)\n            res = util.getAjaxJson(util.urlNovelDetailed(novelId))\n        }\n        if (res.error || res.total === 0) {\n            java.log(`无法从 Linpx 获取当前小说`)\n            return []\n        }\n        return res\n    }\n    // 从网址获取id，尽可能返回系列 res，单篇小说返回小说 res\n    u.getNovelResSeries = function (result) {\n        let seriesId = 0, res = {}\n        let isHtml = result.startsWith(\"<!DOCTYPE html>\")\n        if (isHtml) {\n            let id = baseUrl.match(new RegExp(\"\\\\d+\"))[0]\n            let pattern = \"(https?://)?(www\\\\.)?pixiv\\\\.net(/ajax)?/novel/(series/)?\\\\d+\"\n            let isSeries = baseUrl.match(new RegExp(pattern))\n            if (isSeries) {\n                seriesId = id\n            } else {\n                let pattern = \"((furrynovel\\\\.(ink|xyz))|pixiv\\\\.net)/(pn|(pixiv/)?novel)/(show\\\\.php\\\\?id=)?\\\\d+\"\n                let isNovel = baseUrl.match(new RegExp(pattern))\n                if (isNovel) {\n                    java.log(`匹配小说ID：${id}`)\n                    res = util.getAjaxJson(util.urlNovelDetailed(id))\n                }\n            }\n        } else {\n            res = JSON.parse(result)\n        }\n        if (res.series !== undefined && res.series !== null) {\n            seriesId = res.series.id\n        }\n        if (seriesId) {\n            java.log(`系列ID：${seriesId}`)\n            res = util.getAjaxJson(util.urlSeriesDetailed(seriesId))\n        }\n        if (res.error || res.total === 0) {\n            java.log(`无法从 Linpx 获取当前小说`)\n            return []\n        }\n        return res\n    }\n\n    u.dateFormat = function (str) {\n        let addZero = function (num) {\n            return num < 10 ? '0' + num : num;\n        }\n        let time = new Date(str);\n        let Y = time.getFullYear() + \"年\";\n        let M = addZero(time.getMonth() + 1) + \"月\";\n        let D = addZero(time.getDate()) + \"日\";\n        return Y + M + D;\n    }\n    u.timeTextFormat = function (text) {\n        if (text === undefined) {\n            return \"\"\n        }\n            return `${text.slice(0, 10)} ${text.slice(11, 19)}`\n    }\n\n    util = u\n    java.put(\"util\", objStringify(u))\n}\n\npublicFunc()\n\n// 获取请求的user id方便其他ajax请求构造\nlet uid = java.getResponse().headers().get(\"x-userid\")\nif (uid != null) {\n    cache.put(\"pixiv:uid\", uid)\n}\njava.getStrResponse(null, null)",
        "loginUrl": "",
        "respondTime": 180000,
        "ruleBookInfo": {
            "author": "userName",
            "canReName": "",
            "coverUrl": "coverUrl",
            "init": "@js:\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\nfunction novelHandler(res){\n    let info = {}\n    info.novelId = res.id\n    // info.title = res.title\n    info.userName = res.userName\n    info.tags = res.tags\n    info.textCount = res.length\n    info.description = res.desc\n    info.coverUrl = util.urlCoverUrl(res.coverUrl)\n    // info.catalogUrl = util.urlNovelDetailed(res.id)\n    info.createDate = util.timeTextFormat(res.createDate)\n\n    if (res.series === undefined || res.series === null) {\n        info.title = info.latestChapter = info.title\n        info.tags.unshift('单本')\n        info.catalogUrl = util.urlNovelDetailed(info.novelId)\n    } else {\n        info.seriesId = res.series.id\n        info.title = res.series.title\n        info.tags.unshift('长篇')\n        info.catalogUrl = util.urlSeriesDetailed(info.seriesId)\n\n        let res2 = util.getAjaxJson(util.urlSeriesDetailed(info.seriesId))\n        info.tags = info.tags.concat(res2.tags)   //合并系列 tags\n        info.tags = Array.from(new Set(info.tags))\n        info.description = `${res2.caption}\\n当前章节简介：\\n${info.description}`\n    }\n    info.tags = info.tags.join(\",\")\n    if (util.MORE_INFO_IN_DESCRIPTION) {\n        info.description = `\\n书名：${info.title}\\n作者：${info.userName}\\n标签：${info.tags}\\n上传：${info.createDate}\\n简介：${info.description}`\n    } else {\n        info.description = `\\n${info.description}\\n上传时间：${info.createDate}`\n    }\n    return info\n}\n\n(function (res) {\n    // 为了兼顾导入书架直接走详情页逻辑，不能直接用 book.xxx 来复用搜索页处理结果\n    res = util.getNovelRes(result)  // 系列数据过少，暂不分流\n    try {\n        return novelHandler(res)\n    }catch (e) {\n        java.log(e)\n        java.log(`受 Linpx 的限制，无法获取当前小说的数据`)\n        java.longToast(`受 Linpx 的限制，无法获取当前小说的数据`)\n    }\n})(result)\n",
            "intro": "description",
            "kind": "tags",
            "lastChapter": "latestChapter",
            "name": "title",
            "tocUrl": "catalogUrl",
            "wordCount": "textCount"
        },
        "ruleContent": {
            "content": "@js:\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\n(function (res) {\n    res = util.getNovelRes(result)\n    let content = res.content\n    if (res.series !== null && res.desc !== undefined && res.desc !== \"\") {\n        content = res.desc + \"\\n\" + \"——————————\\n\".repeat(2) + content\n    }\n\n    // 获取 [uploadedimage:] 的图片链接\n    // 将存在的 pixiv 图片链接替换为可访问的直连\n    if (res.images !== undefined && res.images !== null) {\n        Object.keys(res.images).forEach((key) => {\n            content = content.replace(`[uploadedimage:${key}]`, `<img src=\"${util.urlCoverUrl(res.images[key].origin)}\">`)\n        })\n    }\n\n    // 获取 [pixivimage:] 的图片链接 [pixivimage:1234] [pixivimage:1234-1]\n    let matched = content.match(RegExp(/\\[pixivimage:(\\d+)-?(\\d+)]/gm))\n    if (matched) {\n        for (let i in matched) {\n            let illustId, order\n            let matched2 = matched[i].match(RegExp(\"(\\\\d+)-?(\\\\d+)\"))\n            let temp = matched2[0].split(\"-\")\n            illustId = temp[0]\n            if (temp.length >= 2) {\n                order = temp[1]\n            }\n            content = content.replace(`${matched[i]}`, `<img src=\"${util.urlIllustOriginal(illustId, order)}\">`)\n        }\n    }\n\n    // 替换 Pixiv 分页标记符号 [newpage]\n    matched = content.match(RegExp(/[ 　]*\\[newpage][ 　]*/gm))\n    if (matched) {\n        for (let i in matched){\n            java.log(matched[i])\n            content = content.replace(`${matched[i]}`, `${\"<p>​<p/>\".repeat(3)}`)\n        }\n    }\n\n    // 替换 Pixiv 章节标记符号 [chapter:]\n    matched = content.match(RegExp(/\\[chapter:(.*?)]/gm))\n    if (matched) {\n        for (let i in matched) {\n            let matched2 = matched[i].match(/\\[chapter:(.*?)]/m)\n            let chapter = matched2[1].trim()\n            content = content.replace(`${matched[i]}`, `${chapter}<p>​<p/>`)\n        }\n    }\n\n    // 替换 Pixiv 跳转页面标记符号 [[jump:]]\n    matched = content.match(RegExp(/\\[jump:(\\d+)]/gm))\n    if (matched) {\n        for (let i in matched) {\n            let page = matched[i].match(/\\d+/)\n            content = content.replace(`${matched[i]}`, `\\n\\n跳转至第${page}节`)\n        }\n    }\n\n    // 替换 Pixiv 链接标记符号 [[jumpuri: > ]]\n    matched = content.match(RegExp(/\\[\\[jumpuri:(.*?)>(.*?)]]/gm))\n    if (matched) {\n        for (let i in matched) {\n            let matched2 = matched[i].match(/\\[\\[jumpuri:(.*?)>(.*?)]]/m)\n            let matchedText = matched2[0]\n            let urlName = matched2[1].trim()\n            let urlLink = matched2[2].trim()\n            // 阅读不支持超链接\n            // content = content.replace(`${matchedText}`, `<a href=${urlLink}>${urlName}</a>`)\n            if (urlLink === urlName) {\n                content = content.replace(`${matchedText}`, `${urlName}`)\n            } else {\n                content = content.replace(`${matchedText}`, `${urlName}: ${urlLink}`)\n            }\n        }\n    }\n\n    // 替换 Pixiv 注音标记符号 [[rb: > ]]\n    matched = content.match(RegExp(/\\[\\[rb:(.*?)>(.*?)]]/gm))\n    if (matched) {\n        for (let i in matched) {\n            let matched2 = matched[i].match(/\\[\\[rb:(.*?)>(.*?)]]/m)\n            let matchedText = matched2[0]\n            let kanji = matched2[1].trim()\n            let kana = matched2[2].trim()\n\n            if (!util.REPLACE_BOOK_TITLE_MARKS) {\n                // 默认替换成（括号）\n                content = content.replace(`${matchedText}`, `${kanji}（${kana}）`)\n            } else {\n                var reg = new RegExp(\"[\\\\u4E00-\\\\u9FFF]+\",\"g\");\n                if (reg.test(kana)) {\n                    // kana为中文，则替换回《书名号》\n                    content = content.replace(`${matchedText}`, `${kanji}《${kana}》`)\n                } else{\n                    // 阅读不支持 <ruby> <rt> 注音\n                    // content = content.replace(`${matchedText}`, `<ruby>${kanji}<rt>${kana}</rt></ruby>`)\n                    content = content.replace(`${matchedText}`, `${kanji}（${kana}）`)\n                }\n            }\n        }\n    }\n\n    return content\n})(result)",
            "imageStyle": "DEFAULT",
            "replaceRegex": "",
            "sourceRegex": ""
        },
        "ruleExplore": {
            "author": "userName",
            "bookList": "@js:\nvar util = objParse(String(java.get(\"util\")))\nvar seriesSet = new Set();  // 存储seriesID\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\n\n/**\n * @params arr 传入的源数组\n * @params length 需要获取的元素的个数\n */\nfunction randomChoseArrayItem(arr, length) {\n    let copyArr = JSON.parse(JSON.stringify(arr))\n    let newArr = [];\n    for (let i = 0; i < length; i++) {\n        let index = Math.floor(Math.random() * copyArr.length);\n        let item = copyArr[index];\n        newArr.push(item)\n        copyArr.splice(index, 1)\n    }\n    return newArr.reverse()\n}\n\n\nfunction handlerRecommendUsers() {\n    const MAX_FETCH_USER_NUMBER = 2;\n\n    return () => {\n        let userIds = JSON.parse(result).map(i => i.id)\n        // java.log(`用户id个数:${userIds.length}`)\n        if (userIds.length > MAX_FETCH_USER_NUMBER) {\n            userIds = randomChoseArrayItem(userIds, MAX_FETCH_USER_NUMBER);\n        }\n        // java.log(`查询的用户Ids:${userIds}`)\n        let usersInfo = util.getWebviewJson(util.urlUsersDetailed(userIds))\n        // java.log(`返回的${JSON.stringify(usersInfo)}`)\n        let queryNovelIds = []\n        // java.log(`${JSON.stringify(usersInfo)}`)\n        usersInfo.filter(user => user.novels && user.novels.length > 0)\n            .map(user => user.novels)\n            // 将list展平[1,2,3]变为1,2,3 添加到novelList中\n            .forEach(novels => {\n                novels.forEach(novel => {\n                    queryNovelIds.push(novel)\n                })\n            })\n        // 暂时限制最大获取数量\n        if (queryNovelIds.length > 10) {\n            queryNovelIds = randomChoseArrayItem(queryNovelIds, 10)\n        }\n        novelList = util.getWebviewJson(util.urlNovelsDetailed(queryNovelIds))\n        return util.formatNovels(util.combineNovels(novelList))\n    }\n}\n\nfunction handlerFollowLatest() {\n    return () => {\n        let resp = JSON.parse(result)\n        return util.formatNovels(util.combineNovels(resp))\n    }\n}\n\nfunction handlerFactory() {\n    if (baseUrl.indexOf(\"/fav/user\") !== -1) {\n        return handlerRecommendUsers()\n    }\n\n    if (baseUrl.indexOf(\"/pixiv/novels/recent\") !== -1) {\n        return handlerFollowLatest()\n    }\n\n}\n\n(() => {\n    return handlerFactory()()\n})()\n",
            "bookUrl": "detailedUrl",
            "coverUrl": "coverUrl",
            "intro": "description",
            "kind": "tags",
            "lastChapter": "latestChapter",
            "name": "title",
            "wordCount": "textCount"
        },
        "ruleSearch": {
            "author": "userName",
            "bookList": "@js:\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\n\nfunction getUser(username, exactMatch) {\n    // 修复传入object的bug\n    username = String(username)\n    let resp = util.getAjaxJson(util.urlSearchUsers(username))\n    if (resp.users.length === 0) {\n        return []\n    }\n    if (!exactMatch) {\n        return resp.users\n    }\n    // 只返回用户名完全一样的用户\n    return resp.users.filter(user => {\n        return user.name === username\n    })\n}\n\n// 包含所有小说数据\nfunction getUserDetailedList(uidList) {\n    // java.log(`UIDLIST:${JSON.stringify(uidList)}`)\n    return util.getWebviewJson(util.urlUsersDetailed(uidList))\n}\n\nfunction getNovels(nidList) {\n    let page = Number(java.get(\"page\"))\n    // 分页\n    let list = nidList.slice((page - 1) * 20, page * 20)\n    if (list.length === 0) {\n        return []\n    }\n    // java.log(`NIDURL:${util.urlNovelsDetailed(list)}`)\n    return util.getWebviewJson(util.urlNovelsDetailed(list))\n}\n\n// 存储seriesID\nvar first = true;\nvar seriesSet = {\n    keywords: \"Linpx:Search\",\n    has: (value) => {\n        let page = Number(java.get(\"page\"))\n        if (page === 1 && first) {\n            first = false\n            cache.deleteMemory(this.keywords)\n            return false\n        }\n\n        let v = cache.getFromMemory(this.keywords)\n        if (v === undefined || v === null) {\n            return false\n        }\n        let set = new Set(JSON.parse(v))\n        return set.has(value)\n    },\n\n    add: (value) => {\n        let v = cache.getFromMemory(this.keywords)\n        if (v === undefined || v === null) {\n            cache.putMemory(this.keywords, JSON.stringify([value]))\n\n        } else {\n            let arr = JSON.parse(v)\n            if (typeof arr === \"string\") {\n                arr = Array(arr)\n            }\n            arr.push(value)\n            cache.putMemory(this.keywords, JSON.stringify(arr))\n        }\n    },\n};\n\n\nfunction findUserNovels(username) {\n    let novelList = []\n    // 查询用户\n    let userArr = getUser(username, true)\n    // 获取用户所有小说\n    let uidList = userArr.filter(user => {\n        return user.novels.length > 0\n    }).map(user => user.id)\n\n    if (uidList.length > 0) {\n        let list = getUserDetailedList(uidList)\n        let nidList = []\n        // 从两层数组中提取novelsId\n        list.forEach(user => {\n            user.novels\n                // 按id降序排序-相当于按时间降序排序\n                .reverse()\n                .forEach(nid => nidList.push(nid))\n        })\n        getNovels(nidList).forEach(novel => {\n            novelList.push(novel)\n        })\n    }\n    return novelList\n}\n\n(function (res) {\n    res = JSON.parse(res)\n    let novels = []\n    findUserNovels(java.get(\"key\")).forEach(v => {\n        novels.push(v)\n    })\n    novels = novels.concat(res.novels)\n    // 返回空列表中止流程\n    if (novels.length === 0) {\n        return []\n    }\n    return util.formatNovels(util.combineNovels(novels))\n}(result))",
            "bookUrl": "detailedUrl",
            "checkKeyWord": "测试页面",
            "coverUrl": "coverUrl",
            "intro": "description",
            "kind": "tags",
            "lastChapter": "latestChapter",
            "name": "title",
            "wordCount": "textCount"
        },
        "ruleToc": {
            "chapterList": "@js:\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\nfunction oneShotHandler(res) {\n    res.textCount =　res.detail.content.length\n    res.updateDate = util.timeTextFormat(res.createDate)\n    return [{\n        title: res.title,\n        chapterUrl: util.urlNovel(res.id),\n        updateDate:`${res.updateDate}　　${res.textCount}字`\n    }]\n}\n\nfunction seriesHandler(res) {\n    res.novels.forEach(v => {\n        v.title = v.title.replace(RegExp(/（|）|-/g), \"\")\n        v.chapterUrl = util.urlNovel(v.id)\n        // v.updateDate = String(v.coverUrl.match(RegExp(\"\\\\d{4}/\\\\d{2}/\\\\d{2}\")))  //fake\n        v.detail = util.getAjaxJson(util.urlNovelDetailed(v.id))\n        v.textCount = v.detail.content.length\n        v.updateDate = util.timeTextFormat(v.detail.createDate)\n        v.updateDate = `${v.updateDate}　　${v.textCount}字`\n        util.debugFunc(() => {\n            java.log(`${v.title}`)\n        })\n    })\n    return res.novels\n}\n\n(function (res) {\n    res = util.getNovelResSeries(result)\n    if (res.novels !== undefined) {\n        return seriesHandler(res)\n    } else {\n        return oneShotHandler(res)\n    }\n})(result)\n",
            "chapterName": "title",
            "chapterUrl": "chapterUrl",
            "updateTime": "updateDate"
        },
        "searchUrl": "@js:\njava.put(\"page\",page);java.put(\"key\",key);\n`https://api.furrynovel.ink/pixiv/search/novel/${encodeURI(key)}/cache?page=${page}`;",
        "variableComment": "{\n    \"SHOW_ORIGINAL_NOVEL_LINK\": true,\n    \"REPLACE_BOOK_TITLE_MARKS\": true,\n    \"MORE_INFO_IN_DESCRIPTION\": false,\n    \"DEBUG\": false\n}\n// 此处以上内容为默认设置\n// 若源变量为空，则使用上述默认设置\n// 自定义设置：复制 { } 及内部代码，修改 true 或 false\n// 注意不要添加或删除尾随逗号\",\"\n\n// SHOW_ORIGINAL_NOVEL_LINK\n// 目录处显示小说源链接，但会增加请求次数\n// REPLACE_BOOK_TITLE_MARKS\n// 注音内容为汉字时，替换为书名号\n// MORE_INFO_IN_DESCRIPTION\n// 书籍简介显示更多信息\n// DEBUG\n// 调试模式",
        "weight": 0
    }
]