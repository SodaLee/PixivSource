[
    {
        "bookSourceComment": "兽人控小说站书源（更新📆：2025-02-01）\n\n可用功能：✅搜索✅发现✅添加网址✅订阅源  \n搜索小说：✅单篇✅系列✅作者✅标签  \n发现小说：✅热门小说✅最新小说✅随便来点  \n添加网址：✅兽人控小说站链接  \n订阅用法：点击订阅源打开小说/系列小说，点击【加入书架】按钮，添加小说到书架\n\n书源发布：兽人阅读频道 https://t.me/FurryReading  \n项目地址：https://github.com/windyhusky/PixivSource  \n使用教程：https://github.com/windyhusky/PixivSource/blob/main/doc/FurryNovel.md\n\n规则订阅：Import 订阅源\nhttps://cdn.jsdelivr.net/gh/windyhusky/PixivSource@main/import.json\nhttps://raw.githubusercontent.com/windyhusky/PixivSource/main/import.json\n\n⚙️ 书源设置：\n书源管理 - 编辑书源 - 基本 - 变量说明 - 修改并保存\n\n🔎 筛选发现：\n发现 - 长按\"Pixiv\" - 编辑 - 右上角菜单 - 设置源变量  \n设置源变量：输入标签，保存  \n发现 - 长按\"Pixiv\" - 刷新 - 查看他人收藏",
        "bookSourceGroup": "🔞 Pixiv",
        "bookSourceName": "兽人控小说站",
        "bookSourceType": 0,
        "bookSourceUrl": "https://furrynovel.com",
        "bookUrlPattern": "(https?://)?(www\\.|api\\.)?furrynovel\\.com(/api)?/(zh|en|ja)/novel/\\d+(/chapter/d+)?",
        "customOrder": 3,
        "enabled": true,
        "enabledCookieJar": false,
        "enabledExplore": true,
        "exploreUrl": "@js:\nlet key = String(source.getVariable()).trim()\nif (key === undefined || key === \"\"){\n    java.longToast(\"可设置源变量，筛选发现内容\")\n} else {\n    java.longToast(`正在搜索：${key}`)\n}\n\nli = [\n    {\"热门小说\": `https://api.furrynovel.com/api/novel?page={{page}}&order_by=popular&tags[]=${key}`},\n    {\"最新小说\": `https://api.furrynovel.com/api/novel?page={{page}}&order_by=latest&tags[]=${key}`},\n    {\"随便来点\": `https://api.furrynovel.com/api/novel?page={{page}}&order_by=random&tags[]=${key}`}\n]\n\n// 格式化发现地址\nli.forEach(item => {\n    item.title = Object.keys(item)[0]\n    item.url = Object.values(item)[0]\n    delete item[Object.keys(item)[0]]\n    item.style = {}\n    item.style.layout_flexGrow = 1\n    item.style.layout_flexBasisPercent = 0.15\n})\nJSON.stringify(li)",
        "lastUpdateTime": 1739116800251,
        "loginCheckJs": "var util = {}\n\nfunction objStringify(obj) {\n    return JSON.stringify(obj, (n, v) => {\n        if (typeof v == \"function\")\n            return v.toString();\n        return v;\n    });\n}\n\nfunction publicFunc() {\n    let u = {}, settings = {}\n    java.log(String(source.bookSourceComment).split(\"\\n\")[0]) // 输出书源信息\n    java.log(`手动更新时间：${java.timeFormat(source.lastUpdateTime)}`) // 输出书源信息\n    settings = JSON.parse(String(source.variableComment).match(RegExp(/{([\\s\\S]*?)}/gm)))\n    if (settings !== null) {\n        java.log(\"⚙️ 使用自定义设置\")\n    } else {\n        settings = {}\n        settings.SHOW_ORIGINAL_NOVEL_LINK = true\n        settings.REPLACE_BOOK_TITLE_MARKS = true\n        settings.MORE_INFO_IN_DESCRIPTION = false\n        settings.DEBUG = false\n        java.log(\"⚙️ 使用默认设置（无自定义设置 或 自定义设置有误）\")\n    }\n    u.SHOW_ORIGINAL_NOVEL_LINK = settings.SHOW_ORIGINAL_NOVEL_LINK  // 目录处显示小说源链接，但会增加请求次数\n    u.REPLACE_BOOK_TITLE_MARKS = settings.REPLACE_BOOK_TITLE_MARKS  // 注音内容为汉字时，替换为书名号\n    u.MORE_INFO_IN_DESCRIPTION = settings.MORE_INFO_IN_DESCRIPTION  // 书籍简介显示更多信息\n    u.DEBUG = settings.DEBUG // 调试模式\n\n    if (u.DEBUG === true) {\n        java.log(JSON.stringify(settings, null, 4))\n        java.log(`DEBUG = ${u.DEBUG}`)\n    }\n\n\n    u.debugFunc = (func) => {\n        if (util.DEBUG) {\n            func()\n        }\n    }\n    u.cacheGetAndSet = (key, supplyFunc) => {\n        let v = cache.get(key)\n        if (v === undefined || v === null) {\n            v = JSON.stringify(supplyFunc())\n            // 缓存10分钟\n            cache.put(key, v, 600)\n        }\n        return JSON.parse(v)\n    }\n    u.getAjaxJson = (url) => {\n        return util.cacheGetAndSet(url, () => {\n            return JSON.parse(java.ajax(url))\n        })\n    }\n    u.getWebviewJson = (url) => {\n        return util.cacheGetAndSet(url, () => {\n            let html = java.webView(null, url, null)\n            return JSON.parse((html.match(new RegExp(\">\\\\[{.*?}]<\"))[0].replace(\">\", \"\").replace(\"<\", \"\")))\n        })\n    }\n\n    u.urlNovelUrl = (novelId) => {\n        return `https://furrynovel.com/zh/novel/${novelId}`\n    }\n    u.urlNovelDetail = (novelId) => {\n        return `https://api.furrynovel.com/api/zh/novel/${novelId}`\n    }\n    u.urlNovelsDetail = (novelIds) => {\n        return `https://api.furrynovel.com/api/zh/novel?${novelIds.map(v => \"ids[]=\" + v).join(\"&\")}`\n    }\n    u.urlNovelChapterUrl = (novelId, chapterId) => {\n        return `https://furrynovel.com/zh/novel/${novelId}/chapter/${chapterId}`\n    }\n    u.urlNovelChapterInfo = (novelId) => {\n        return `https://api.furrynovel.com/api/zh/novel/${novelId}/chapter`\n    }\n    u.urlNovelChapterDetail = (novelId, chapterId) => {\n        return `https://api.furrynovel.com/api/zh/novel/${novelId}/chapter/${chapterId}`\n    }\n    u.urlNovelChapter = (novelId, chapterId) => {\n        if (util.SHOW_ORIGINAL_NOVEL_LINK) {\n            return util.urlNovelChapterUrl(novelId, chapterId)\n        } else {\n            return util.urlNovelChapterDetail(novelId, chapterId)\n        }\n    }\n    u.urlCoverUrl = (pxImgUrl) => {\n        return `https://img.furrynovel.com/?url=${pxImgUrl}`\n    }\n\n    u.urlLinpxNovelUrl = (novelId) => {\n        return `https://furrynovel.ink/pixiv/novel/${novelId}/cache`\n    }\n    u.urlLinpxNovelDetail = (novelId) => {\n        return `https://api.furrynovel.ink/pixiv/novel/${novelId}/cache`\n    }\n    u.urlLinpxCoverUrl = (pxImgUrl) => {\n        return `https://pximg.furrynovel.ink/?url=${pxImgUrl}&w=800`\n    }\n    u.urlIllustOriginal = (illustId, order) => {\n        // 使用 pixiv.cat 获取插图\n        let illustOriginal = `https://pixiv.re/${illustId}.png`\n        // let illustOriginal = `https://pixiv.nl/${illustId}.png`\n        if (order >= 1) {\n            illustOriginal = `https://pixiv.re/${illustId}-${order}.png`\n            // illustOriginal = `https://pixiv.nl/${illustId}-${order}.png`\n        }\n        return illustOriginal\n    }\n    u.urlSourceUrl = (source, oneShot, id) => {\n        if (source === \"bilibili\") {\n            return `https://www.bilibili.com/read/readlist/rl${id}/`\n        }\n        if (source === \"pixiv\" && oneShot === true) {\n            return `https://www.pixiv.net/novel/show.php?id=${id}`\n        }\n        if (source === \"pixiv\" && oneShot === false) {\n            return `https://www.pixiv.net/novel/series/${id}`\n        }\n    }\n\n    u.getNovels = function () {\n        if (JSON.parse(result).code === 200 && JSON.parse(result).count > 0){\n            return JSON.parse(result).data\n        } else {\n            return []\n        }\n    }\n\n    u.handNovels = function (novels) {\n        novels.forEach(novel =>{\n            // novel.id = novel.id\n            novel.title = novel.name\n            // novel.tags = novel.tags\n            novel.userName = novel.author.name\n            // novel.userId = novel.author.id\n            novel.textCount = null\n            try {\n                novel.latestChapter = novel.latest_chapters[0].name}\n            catch (e) {\n                novel.latestChapter = null\n            }\n            novel.description = novel.desc\n            novel.coverUrl = novel.cover\n            novel.detailedUrl = util.urlNovelDetail(novel.id)\n\n            // novel.source = novel.source\n            novel.oneShot = novel.ext_data.oneShot\n            novel.sourceId = novel.source_id\n            novel.sourceUrl = util.urlSourceUrl(novel.source, novel.oneShot, novel.sourceId)\n\n            novel.createDate = novel.created_at\n            novel.updateDate = novel.updated_at\n            novel.syncDate = novel.fetched_at\n            // novel.status = novel.status\n            // if (novel.status !== \"publish\"){  // suspend\n            //     java.log(util.urlNovelUrl(novel.id))\n            //     java.log(novel.sourceUrl)\n            // }\n        })\n        return novels\n    }\n\n    u.formatNovels = function (novels) {\n        novels.forEach(novel => {\n            novel.title = novel.title.replace(RegExp(/^\\s+|\\s+$/g), \"\")\n            novel.tags = novel.tags.join(\",\")\n            novel.createDate = util.dateFormat(novel.createDate)\n            novel.updateDate = util.dateFormat(novel.updateDate)\n            novel.syncDate = util.dateFormat(novel.syncDate)\n            if (util.MORE_INFO_IN_DESCRIPTION) {\n                novel.description = `\\n书名：${novel.title}\\n作者：${novel.userName}\\n标签：${novel.tags}\\n上传：${novel.createDate}\\n更新：${novel.updateDate}\\n同步：${novel.syncDate}\\n简介：${novel.description}`\n            } else {\n                novel.description = `\\n${novel.description}\\n上传时间：${novel.createDate}\\n更新时间：${novel.updateDate}\\n\n            同步时间：${novel.syncDate}`\n            }\n        })\n        return novels\n    }\n\n    u.dateFormat = function(text) {\n        return `${text.slice(0, 10)}`\n    }\n    u.timeTextFormat = function(text) {\n        return `${text.slice(0, 10)} ${text.slice(11, 19)}`\n    }\n\n    util = u\n    java.put(\"util\", objStringify(u))\n}\n\npublicFunc()\njava.getStrResponse(null, null)",
        "loginUrl": "",
        "respondTime": 180000,
        "ruleBookInfo": {
            "author": "userName",
            "canReName": "true",
            "coverUrl": "coverUrl",
            "init": "@js:\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\nfunction novelHandler(novel) {\n    novel = util.formatNovels(util.handNovels([novel]))[0]\n    novel.detailedUrl = util.urlNovelUrl(novel.id)\n    novel.catalogUrl = util.urlNovelChapterInfo(novel.id)\n    return novel\n}\n\nfunction getNovelRes(result){\n    let res = {}\n    let isHtml = result.startsWith(\"<!DOCTYPE html>\")\n    let pattern = \"(https?://)?(www\\\\.)?furrynovel\\\\.com/(zh|en|ja)/novel/\\\\d+(/chapter/d+)?\"\n    let fnWebpage = baseUrl.match(new RegExp(pattern))\n    if (isHtml && fnWebpage) {\n        let novelId = baseUrl.match(new RegExp(\"\\\\d+\"))[0]\n        res = util.getAjaxJson(util.urlNovelDetail(novelId))\n    } else {\n        res = JSON.parse(result)\n    }\n    if (res.data.length === 0) {\n        java.log(`无法从 FurryNovel.com 获取当前小说`)\n        java.log(JSON.stringify(res))\n    }\n    return res.data\n}\n\n(() => {\n    try {\n        return novelHandler(getNovelRes(result))\n    } catch (e) {\n        java.log(e)\n        java.log(`受 FurryNovel.com 限制，无法获取当前小说数据`)\n    }\n})();",
            "intro": "description",
            "kind": "tags",
            "lastChapter": "latestChapter",
            "name": "title",
            "tocUrl": "catalogUrl",
            "wordCount": "textCount"
        },
        "ruleContent": {
            "content": "@js:\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\nfunction getContent(res) {\n    let content = res.content\n    // 获取 [uploadedimage:] 的图片链接\n    let hasEmbeddedImages = content.match(RegExp(/\\[uploadedimage:(\\d+)-?(\\d+)]/gm))\n    if (hasEmbeddedImages) {\n        resp = JSON.parse(java.ajax(util.urlLinpxNovelDetail(res.source_id)))\n        Object.keys(resp.images).forEach((key) => {\n            content = content.replace(`[uploadedimage:${key}]`, `<img src=\"${util.urlLinpxCoverUrl(resp.images[key].origin)}\">`)\n        })\n    }\n\n    // 获取 [pixivimage:] 的图片链接 [pixivimage:1234] [pixivimage:1234-1]\n    let matched = content.match(RegExp(/\\[pixivimage:(\\d+)-?(\\d+)]/gm))\n    if (matched) {\n        for (let i in matched) {\n            let illustId, order\n            let matched2 = matched[i].match(RegExp(\"(\\\\d+)-?(\\\\d+)\"))\n            let temp = matched2[0].split(\"-\")\n            illustId = temp[0]\n            if (temp.length >= 2) {\n                order = temp[1]\n            }\n            content = content.replace(`${matched[i]}`, `<img src=\"${util.urlIllustOriginal(illustId, order)}\">`)\n        }\n    }\n\n    // 替换 Pixiv 分页标记符号 [newpage]\n    matched = content.match(RegExp(/[ 　]*\\[newpage][ 　]*/gm))\n    if (matched) {\n        for (let i in matched) {\n            content = content.replace(`${matched[i]}`, `${\"<p>​<p/>\".repeat(3)}`)\n        }\n    }\n\n    // 替换 Pixiv 章节标记符号 [chapter:]\n    matched = content.match(RegExp(/\\[chapter:(.*?)]/gm))\n    if (matched) {\n        for (let i in matched) {\n            let matched2 = matched[i].match(/\\[chapter:(.*?)]/m)\n            let chapter = matched2[1].trim()\n            content = content.replace(`${matched[i]}`, `${chapter}<p>​<p/>`)\n        }\n    }\n\n    // 替换 Pixiv 跳转页面标记符号 [[jump:]]\n    matched = content.match(RegExp(/\\[jump:(\\d+)]/gm))\n    if (matched) {\n        for (let i in matched) {\n            let page = matched[i].match(/\\d+/)\n            content = content.replace(`${matched[i]}`, `\\n\\n跳转至第${page}节`)\n        }\n    }\n\n    // 替换 Pixiv 链接标记符号 [[jumpuri: > ]]\n    matched = content.match(RegExp(/\\[\\[jumpuri:(.*?)>(.*?)]]/gm))\n    if (matched) {\n        for (let i in matched) {\n            let matched2 = matched[i].match(/\\[\\[jumpuri:(.*?)>(.*?)]]/m)\n            let matchedText = matched2[0]\n            let urlName = matched2[1].trim()\n            let urlLink = matched2[2].trim()\n            // 阅读不支持超链接\n            //content = content.replace(`${matchedText}`, `<a href=${urlLink}>${urlName}</a>`)\n            if (urlLink === urlName) {\n                content = content.replace(`${matchedText}`, `${urlName}`)\n            } else {\n                content = content.replace(`${matchedText}`, `${urlName}: ${urlLink}`)\n            }\n        }\n    }\n\n    // 替换 Pixiv 注音标记符号 [[rb: > ]]\n    matched = content.match(RegExp(/\\[\\[rb:(.*?)>(.*?)]]/gm))\n    if (matched) {\n        for (let i in matched) {\n            let matched2 = matched[i].match(/\\[\\[rb:(.*?)>(.*?)]]/m)\n            let matchedText = matched2[0]\n            let kanji = matched2[1].trim()\n            let kana = matched2[2].trim()\n\n            if (!util.REPLACE_BOOK_TITLE_MARKS) {\n                // 默认替换成（括号）\n                content = content.replace(`${matchedText}`, `${kanji}（${kana}）`)\n            } else {\n                let reg = RegExp(\"[\\\\u4E00-\\\\u9FFF]+\", \"g\");\n                if (reg.test(kana)) {\n                    // kana为中文，则替换回《书名号》\n                    content = content.replace(`${matchedText}`, `${kanji}《${kana}》`)\n                } else {\n                    // 阅读不支持 <ruby> <rt> 注音\n                    // content = content.replace(`${matchedText}`, `<ruby>${kanji}<rt>${kana}</rt></ruby>`)\n                    content = content.replace(`${matchedText}`, `${kanji}（${kana}）`)\n                }\n            }\n        }\n    }\n    return content\n}\n\nfunction getNovelRes(result){\n    let chapterId = 0, res = {}\n    let isHtml = result.startsWith(\"<!DOCTYPE html>\")\n    let pattern = \"(https?://)?(www\\\\.)?furrynovel\\\\.com/(zh|en|ja)/novel/\\\\d+(/chapter/\\\\d+)?\"\n    let fnWebpage = baseUrl.match(new RegExp(pattern))\n    if (isHtml && fnWebpage) {\n        let novelId = baseUrl.match(RegExp(/\\/(\\d+)\\/chapter/))[1]\n        try {\n            chapterId = baseUrl.match(RegExp(/\\/(\\d+)\\/chapter\\/(\\d+)/))[2]\n        } catch (e) {\n            chapterId = util.getAjaxJson(util.urlNovelChapterInfo(novelId)).data[0].id\n        } finally {\n            res = util.getAjaxJson(util.urlNovelChapterDetail(novelId, chapterId))\n        }\n    } else {\n        res = JSON.parse(result)\n    }\n    if (res.data.length === 0) {\n        java.log(`无法从 FurryNovel.com 获取当前小说`)\n        java.log(JSON.stringify(res))\n    }\n    return res.data\n}\n\n(function () {\n    return getContent(getNovelRes(result))\n})()",
            "imageStyle": "DEFAULT"
        },
        "ruleExplore": {
            "author": "userName",
            "bookList": "@js:\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\n(() => {\n    return util.formatNovels(util.handNovels(util.getNovels()))\n})();",
            "bookUrl": "detailedUrl",
            "coverUrl": "coverUrl",
            "intro": "description",
            "kind": "tags",
            "lastChapter": "latestChapter",
            "name": "title",
            "wordCount": "textCount"
        },
        "ruleSearch": {
            "author": "userName",
            "bookList": "@js:\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\n(() => {\n    return util.formatNovels(util.handNovels(util.getNovels()))\n})();",
            "bookUrl": "detailedUrl",
            "coverUrl": "coverUrl",
            "intro": "description",
            "kind": "tags",
            "lastChapter": "latestChapter",
            "name": "title",
            "wordCount": "textCount"
        },
        "ruleToc": {
            "chapterList": "@js:\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\nfunction novelHandler(novels) {\n    novels.forEach(novel => {\n        novel.chapterId = novel.id\n        novel.novelId = baseUrl.match(RegExp(/\\d+/))[0]\n        novel.chapterName = novel.title = novel.name\n        novel.chapterUrl =  util.urlNovelChapter(novel.novelId, novel.chapterId)\n        novel.chapterInfo = `${novel.created_at}　　${novel.text_count}字`\n    })\n    return novels\n}\n\nfunction getNovelRes(result){\n    let res = {}\n    let isHtml = result.startsWith(\"<!DOCTYPE html>\")\n    let pattern = \"(https?://)?(www\\\\.)?furrynovel\\\\.com/(zh|en|ja)/novel/\\\\d+(/chapter/d+)?\"\n    let fnWebpage = baseUrl.match(new RegExp(pattern))\n    if (isHtml && fnWebpage) {\n        let novelId = baseUrl.match(new RegExp(\"\\\\d+\"))[0]\n        // res = util.getAjaxJson(util.urlNovelDetail(novelId))\n        res = util.getAjaxJson(util.urlNovelChapterInfo(novelId))\n    } else {\n        res = JSON.parse(result)\n    }\n    if (res.data.length === 0) {\n        java.log(`无法从 FurryNovel.com 获取当前小说`)\n        java.log(JSON.stringify(res))\n    }\n    return res.data\n}\n\n(function () {\n    return novelHandler(getNovelRes(result))\n})()",
            "chapterName": "title",
            "chapterUrl": "chapterUrl",
            "updateTime": "chapterInfo"
        },
        "searchUrl": "@js:\njava.put(\"page\",page);java.put(\"key\",key);\n`https://api.furrynovel.com/api/zh/novel?page=${page}&order_by=popular&keyword=${encodeURI(key)}`;",
        "variableComment": "🔎 筛选发现：\n发现 - 长按\"兽人小说站\" - 编辑 - 右上角菜单 - 设置源变量\n设置源变量：输入想要搜索/筛选的标签，保存\n发现 - 长按\"兽人小说站\" - 刷新 - 查看他人收藏\n\n\n⚙️ 自定义书源设置：\n⚙️ 自定义设置：请在基本-变量说明处修改代码\n⚙️ 自定义设置：将 true 改为 false，或相反\n⚠️ 设置源变量【无法】更改书源自定义设置\n⚠️ 注意不要添加或删除尾随逗号\",\"\n⚠️ 发现页需要长按\"Pixiv\"，手动刷新\n以下内容为书源设置：\n{\n\"SHOW_GENERAL_NOVELS_RANK\": false,\n\"MORE_INFO_IN_DESCRIPTION\": false,\n\"SHOW_ORIGINAL_NOVEL_LINK\": true,\n\"REPLACE_BOOK_TITLE_MARKS\": true,\n\"DEBUG\": false\n}\n\n// SHOW_GENERAL_NOVELS_RANK\n// 发现：显示一般小说排行榜\n// MORE_INFO_IN_DESCRIPTION\n// 详情：书籍简介显示更多信息\n// SHOW_ORIGINAL_NOVEL_LINK\n// 目录：显示源链接，但会增加请求次数\n// REPLACE_BOOK_TITLE_MARKS\n// 正文：注音内容为汉字时，替换为书名号\n// DEBUG\n// 调试模式\n\n",
        "weight": 0
    }
]